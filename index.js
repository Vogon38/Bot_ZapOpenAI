import { config } from 'dotenv';
import axios from 'axios';
import qrcode from 'qrcode-terminal';
import whatsapp from 'whatsapp-web.js';
import { google } from 'googleapis';
import fs from 'fs';

const { Client, MessageMedia, LocalAuth } = whatsapp;

config();

const client = new Client({
    authStrategy: new LocalAuth()
});

client.on('qr', qr => {
    qrcode.generate(qr, { small: true })
});

client.on('message_create', async (message) => {
    const commandRegex = /^\/(bot|img|ajuda|video)/;
    const messageBody = message.body.trim();
    if (messageBody.match(commandRegex)) {
        try {
            commands(message);
        } catch (e) {
            console.log(`Error: ${e}`);
            const logMessage = `${new Date().toISOString()} - Error: ${e.message}\n`;
            fs.appendFile("logs/errors.log", logMessage, (err) => {
                if (err) {
                    console.error(`Erro ao salvar log: ${err.message}`);
                }
            });
        }
    }
});

client.on('authenticated', (session) => console.log(`Autenticado`))

client.on('ready', () => {
    console.log('O zap-gpt está pronto 😋');
    let firstMessageSent = false;
    if (!firstMessageSent) { // verifica se a primeira mensagem já foi enviada
        client.sendMessage(process.env.PHONE_NUMBER, 'Hello, World! 🧙‍');
        firstMessageSent = true; // atualiza a flag para true depois de enviar a mensagem
    }
});

client.initialize();

const headers = {
    'Authorization': `Bearer ${process.env.OPENAI_KEY}`,
    'Content-Type': 'application/json'
}

const axiosInstance = axios.create({
    baseURL: 'https://api.openai.com/',
    timeout: 120000,
    headers: headers,
});

const getDavinciResponse = async (clientText) => {
    const body = {
        "model": "text-davinci-003",
        "prompt": clientText,
        "max_tokens": 2048,
        "temperature": 1
    }

    try {
        const { data } = await axiosInstance.post('v1/completions', body)
        const botAnswer = data.choices[0].text
        return `ChatGPT 🤖 ${botAnswer}`
    } catch (e) {
        return `❌ OpenAI Response Error`
    }
}

const getDalleResponse = async (clientText) => {
    const body = {
        prompt: clientText, // Descrição da imagem
        n: 1, // Número de imagens a serem geradas
        size: "256x256", // Tamanho da imagem
    }

    try {
        const { data } = await axiosInstance.post('v1/images/generations', body)
        return data.data[0].url
    } catch (e) {
        return `❌ OpenAI Response Error`
    }
}

const getVideoResponse = async (clientText) => {
    const youtube = google.youtube({
        version: 'v3',
        auth: process.env.YOUTUBE_API_KEY
    });

    try {
        const { data } = await youtube.search.list({
            part: 'id,snippet',
            q: clientText,
            type: 'video',
            maxResults: 1,
        });

        const videoId = data.items[0].id.videoId;
        return `https://www.youtube.com/watch?v=${videoId} \n\n_Generated by @${process.env.ORGANIZATION_NAME}_`;
    } catch (e) {
        return `❌ YouTube API Error`;
    }
};

const commands = async (message) => {
    const iaCommands = {
        davinci3: "/bot",
        dalle: "/img",
        video: "/video",
    };

    const contact = await message.getContact();
    const sender = message.from.includes(process.env.PHONE_NUMBER) ? message.to : message.from;
    const messageBody = message.body.trim();
    const [command, ...args] = messageBody.split(" "); // Extrai o comando e seus argumentos

    switch (command) { // Usa a palavra-chave do comando
        case iaCommands.davinci3:
            const question = args.join(" ");
            getDavinciResponse(question).then(async (response) => {
                client.sendMessage(sender, `${response}\n\n_Generated by @${process.env.ORGANIZATION_NAME}_`, { mentions: [contact] });
            });
            break;

        case iaCommands.dalle:
            const imgDescription = args.join(" ");
            getDalleResponse(imgDescription, message).then(async (imgUrl) => {
                const media = await MessageMedia.fromUrl(imgUrl);
                const options = {
                    mentions: [contact],
                    caption: `_Generated by @${process.env.ORGANIZATION_NAME}_`,
                    media: media,
                    sendMediaAsSticker: true, // essa opção ativada envia as imagens como stickers
                };
                await client.sendMessage(sender, media, options);
            });
            break;

        case iaCommands.video:
            const videoQuery = args.join(' ');
            getVideoResponse(videoQuery).then(async (videoUrl) => {
                await client.sendMessage(sender, videoUrl);
            });
            break;

        case "/ajuda":
            const availableCommands = Object.values(iaCommands);
            const response = `Comandos disponíveis: ${availableCommands.join(", ")}`;
            client.sendMessage(sender, response, { mentions: [contact] });
            break;
    }

    // Salvar log em arquivo
    const logMessage = `${new Date().toISOString()} - ${message.from} - ${message.body}\n`;
    fs.appendFile("logs/messages.log", logMessage, (err) => {
        if (err) {
            console.error(`Erro ao salvar log: ${err.message}`);
        }
    });
};
